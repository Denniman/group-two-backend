// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  CANCELLED
}

enum UserType {
  CUSTOMER
  MERCHANT
}

model Customer {
  id         String    @id @unique @default(cuid())
  firstName  String
  lastName   String
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  businessId String?
  session    Session[]
  Store      Store     @relation(fields: [storeId], references: [id])
  storeId    String

  @@unique([id, businessId])
}

model Merchant {
  id           String    @id @unique @default(cuid())
  firstName    String
  lastName     String
  password     String
  role         String    @default("Owner")
  email        String    @unique
  avatar       String?
  isSuperAdmin Boolean   @default(false)
  isAdmin      Boolean   @default(true)
  businessId   String?
  belongsTo    Business? @relation(fields: [businessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  session      Session[]
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
  store        Store?    @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId      String?
}

model Session {
  id           String    @id @unique @default(cuid())
  token        String    @unique
  userId       String
  refreshToken String
  userType     UserType
  createdAt    DateTime  @default(now())
  Customer     Customer? @relation(fields: [customerId], references: [id])
  customerId   String?
  Merchant     Merchant? @relation(fields: [merchantId], references: [id])
  merchantId   String?

  @@index([userId, userType], name: "UserSessionIndex")
}

model Product {
  id           String          @id @unique @default(cuid())
  name         String
  quantity     Int
  batchNumber  String
  dateSold     DateTime?
  amount       Float
  productImage String?
  description  String?
  category     ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId   String
  storeId      String
  Transaction  Transaction?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Store        Store           @relation(fields: [storeId], references: [id])
}

model ProductCategory {
  id        String    @id @unique @default(cuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Transaction {
  id        String             @id @unique @default(cuid())
  date      DateTime
  quantity  Int
  txId      String?
  productId String             @unique
  status    TransactionStatus?
  amount    Float
  product   Product            @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Business {
  id                  String     @id @unique @default(cuid())
  businessName        String     @unique
  businessLogo        String?
  phoneNumber         String?
  businessEmail       String?
  businessDescription String?    @db.VarChar(2555)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  Merchant            Merchant[]
}

model Store {
  id               String       @id @unique @default(cuid())
  storeName        String       @unique
  storeDescription String?
  storeUrl         String?
  products         Product[]
  customers        Customer[]
  merchant         Merchant[]
  StoreSettingsId  String
  setting          StoreSetting @relation(fields: [StoreSettingsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model StoreSetting {
  id               String   @id @unique @default(cuid())
  primaryColor     String?
  secondaryColor   String?
  storeBannerImage String?
  fontStyle        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Store            Store[]
}
